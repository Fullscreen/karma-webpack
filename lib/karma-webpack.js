'use strict';

var os = require('os');
var _ = require('lodash');
var path = require('path');
var async = require('async');
var webpackDevMiddleware = require('webpack-dev-middleware');
var webpack = require('webpack');
var SingleEntryDependency = require('webpack/lib/dependencies/SingleEntryDependency');

var blocked = [];
var isBlocked = false;

function Plugin(
/* config.webpack */webpackOptions,
/* config.webpackServer */webpackServerOptions,
/* config.webpackMiddleware */webpackMiddlewareOptions,
/* config.basePath */basePath,
/* config.files */files,
/* config.frameworks */frameworks, customFileHandlers, emitter) {
  webpackOptions = _.clone(webpackOptions) || {};
  webpackMiddlewareOptions = _.clone(webpackMiddlewareOptions || webpackServerOptions) || {};

  var applyOptions = Array.isArray(webpackOptions) ? webpackOptions : [webpackOptions];
  var includeIndex = applyOptions.length > 1;

  applyOptions.forEach(function (webpackOptions, index) {
    // The webpack tier owns the watch behavior so we want to force it in the config
    webpackOptions.watch = true;

    // Webpack 2.1.0-beta.7+ will throw in error if both entry and plugins are not specified in options
    // https://github.com/webpack/webpack/commit/b3bc5427969e15fd3663d9a1c57dbd1eb2c94805
    if (!webpackOptions.entry) {
      webpackOptions.entry = function () {
        return {};
      };
    };

    if (!webpackOptions.output) {
      webpackOptions.output = {};
    };

    // When using an array, even of length 1, we want to include the index value for the build.
    // This is due to the way that the dev server exposes commonPath for build output.
    var indexPath = includeIndex ? index + '/' : '';
    var publicPath = indexPath !== '' ? indexPath + '/' : '';

    // Must have the common _karma_webpack_ prefix on path here to avoid
    // https://github.com/webpack/webpack/issues/645
    webpackOptions.output.path = path.join(os.tmpdir(), '_karma_webpack_', indexPath);
    webpackOptions.output.publicPath = path.join(os.tmpdir(), '_karma_webpack_', publicPath);
    webpackOptions.output.filename = '[name]';
    if (includeIndex) {
      webpackOptions.output.jsonpFunction = 'webpackJsonp' + index;
    }
    webpackOptions.output.chunkFilename = '[id].bundle.js';
  });

  this.emitter = emitter;
  this.wrapMocha = frameworks.indexOf('mocha') >= 0 && includeIndex;
  this.optionsCount = applyOptions.length;
  this.files = [];
  this.basePath = basePath;
  this.waiting = [];

  var compiler;
  try {
    compiler = webpack(webpackOptions);
  } catch (e) {
    console.error(e.stack || e);
    if (e.details) {
      console.error(e.details);
    }
    throw e;
  }

  var applyPlugins = compiler.compilers || [compiler];

  applyPlugins.forEach(function (compiler) {
    compiler.plugin('this-compilation', function (compilation, params) {
      compilation.dependencyFactories.set(SingleEntryDependency, params.normalModuleFactory);
    });
    compiler.plugin('make', this.make.bind(this));
  }, this);

  ['invalid', 'watch-run', 'run'].forEach(function (name) {
    compiler.plugin(name, function (_, callback) {
      isBlocked = true;

      if (typeof callback === 'function') {
        callback();
      }
    });
  });

  compiler.plugin('done', function (stats) {
    var applyStats = Array.isArray(stats.stats) ? stats.stats : [stats];
    var assets = [];
    var noAssets = false;

    applyStats.forEach(function (stats) {
      stats = stats.toJson();

      assets.push.apply(assets, stats.assets);
      if (stats.assets.length === 0) {
        noAssets = true;
      }
    });

    if (!this.waiting || this.waiting.length === 0) {
      this.notifyKarmaAboutChanges();
    }

    if (this.waiting && !noAssets) {
      var w = this.waiting;

      this.waiting = null;
      w.forEach(function (cb) {
        cb();
      });
    }

    isBlocked = false;
    for (var i = 0; i < blocked.length; i++) {
      blocked[i]();
    }
    blocked = [];
  }.bind(this));
  compiler.plugin('invalid', function () {
    if (!this.waiting) {
      this.waiting = [];
    }
  }.bind(this));

  webpackMiddlewareOptions.publicPath = path.join(os.tmpdir(), '_karma_webpack_');
  var middleware = this.middleware = new webpackDevMiddleware(compiler, webpackMiddlewareOptions);

  customFileHandlers.push({
    urlRegex: new RegExp('^' + os.tmpdir() + '\/_karma_webpack_\/.*/'),
    handler: function handler(req, res) {
      middleware(req, res, function () {
        res.statusCode = 404;
        res.end('Not found');
      });
    }
  });

  emitter.on('exit', function (done) {
    middleware.close();
    done();
  });
}

Plugin.prototype.notifyKarmaAboutChanges = function () {
  // Force a rebuild
  this.emitter.refreshFiles();
};

Plugin.prototype.addFile = function (entry) {
  if (this.files.indexOf(entry) >= 0) {
    return;
  }
  this.files.push(entry);

  return true;
};

Plugin.prototype.make = function (compilation, callback) {
  async.forEach(this.files.slice(), function (file, callback) {
    var entry = file;

    if (this.wrapMocha) {
      entry = require.resolve('./mocha-env-loader') + '!' + entry;
    }

    var dep = new SingleEntryDependency(entry);

    compilation.addEntry('', dep, path.relative(this.basePath, file).replace(/\\/g, '/'), function () {
      // If the module fails because of an File not found error, remove the test file
      if (dep.module && dep.module.error && dep.module.error.error && dep.module.error.error.code === 'ENOENT') {
        this.files = this.files.filter(function (f) {
          return file !== f;
        });
        this.middleware.invalidate();
      }
      callback();
    }.bind(this));
  }.bind(this), callback);
};

Plugin.prototype.readFile = function (file, callback) {
  var middleware = this.middleware;
  var optionsCount = this.optionsCount;

  var doRead = function () {
    if (optionsCount > 1) {
      async.times(optionsCount, function (idx, callback) {
        middleware.fileSystem.readFile(path.join(os.tmpdir(), '_karma_webpack_', idx, file.replace(/\\/g, '/')), callback);
      }, function (err, contents) {
        if (err) {
          return callback(err);
        };
        contents = contents.reduce(function (arr, x) {
          if (!arr) {
            return [x];
          };
          arr.push(new Buffer('\n'), x);

          return arr;
        }, null);
        callback(null, Buffer.concat(contents));
      });
    } else {
      try {
        var fileContents = middleware.fileSystem.readFileSync(path.join(os.tmpdir(), '_karma_webpack_', file.replace(/\\/g, '/')));

        callback(undefined, fileContents);
      } catch (e) {
        // If this is an error from `readFileSync` method, wait for the next tick.
        // Credit #69 @mewdriller
        if (e.code === 'ENOENT') {
          // eslint-disable-line quotes
          this.waiting = [process.nextTick.bind(process, this.readFile.bind(this, file, callback))];

          // throw otherwise
        } else {
          callback(e);
        }
      }
    }
  }.bind(this);

  if (!this.waiting) {
    doRead();
  } else {
    // Retry to read once a build is finished
    // do it on process.nextTick to catch changes while building
    this.waiting.push(process.nextTick.bind(process, this.readFile.bind(this, file, callback)));
  }
};

function createPreprocesor( /* config.basePath */basePath, webpackPlugin) {
  return function (content, file, done) {
    if (webpackPlugin.addFile(file.path)) {
      // recompile as we have an asset that we have not seen before
      webpackPlugin.middleware.invalidate();
    }

    // read blocks until bundle is done
    webpackPlugin.readFile(path.relative(basePath, file.path), function (err, content) {
      if (err) {
        throw err;
      }

      done(err, content && content.toString());
    });
  };
}

function createWebpackBlocker() {
  return function (request, response, next) {
    if (isBlocked) {
      blocked.push(next);
    } else {
      next();
    }
  };
}

module.exports = {
  webpackPlugin: ['type', Plugin],
  'preprocessor:webpack': ['factory', createPreprocesor],
  'middleware:webpackBlocker': ['factory', createWebpackBlocker]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImthcm1hLXdlYnBhY2suanMiXSwibmFtZXMiOlsib3MiLCJyZXF1aXJlIiwiXyIsInBhdGgiLCJhc3luYyIsIndlYnBhY2tEZXZNaWRkbGV3YXJlIiwid2VicGFjayIsIlNpbmdsZUVudHJ5RGVwZW5kZW5jeSIsImJsb2NrZWQiLCJpc0Jsb2NrZWQiLCJQbHVnaW4iLCJ3ZWJwYWNrT3B0aW9ucyIsIndlYnBhY2tTZXJ2ZXJPcHRpb25zIiwid2VicGFja01pZGRsZXdhcmVPcHRpb25zIiwiYmFzZVBhdGgiLCJmaWxlcyIsImZyYW1ld29ya3MiLCJjdXN0b21GaWxlSGFuZGxlcnMiLCJlbWl0dGVyIiwiY2xvbmUiLCJhcHBseU9wdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJpbmNsdWRlSW5kZXgiLCJsZW5ndGgiLCJmb3JFYWNoIiwiaW5kZXgiLCJ3YXRjaCIsImVudHJ5Iiwib3V0cHV0IiwiaW5kZXhQYXRoIiwicHVibGljUGF0aCIsImpvaW4iLCJ0bXBkaXIiLCJmaWxlbmFtZSIsImpzb25wRnVuY3Rpb24iLCJjaHVua0ZpbGVuYW1lIiwid3JhcE1vY2hhIiwiaW5kZXhPZiIsIm9wdGlvbnNDb3VudCIsIndhaXRpbmciLCJjb21waWxlciIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGFjayIsImRldGFpbHMiLCJhcHBseVBsdWdpbnMiLCJjb21waWxlcnMiLCJwbHVnaW4iLCJjb21waWxhdGlvbiIsInBhcmFtcyIsImRlcGVuZGVuY3lGYWN0b3JpZXMiLCJzZXQiLCJub3JtYWxNb2R1bGVGYWN0b3J5IiwibWFrZSIsImJpbmQiLCJuYW1lIiwiY2FsbGJhY2siLCJzdGF0cyIsImFwcGx5U3RhdHMiLCJhc3NldHMiLCJub0Fzc2V0cyIsInRvSnNvbiIsInB1c2giLCJhcHBseSIsIm5vdGlmeUthcm1hQWJvdXRDaGFuZ2VzIiwidyIsImNiIiwiaSIsIm1pZGRsZXdhcmUiLCJ1cmxSZWdleCIsIlJlZ0V4cCIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJzdGF0dXNDb2RlIiwiZW5kIiwib24iLCJkb25lIiwiY2xvc2UiLCJwcm90b3R5cGUiLCJyZWZyZXNoRmlsZXMiLCJhZGRGaWxlIiwic2xpY2UiLCJmaWxlIiwicmVzb2x2ZSIsImRlcCIsImFkZEVudHJ5IiwicmVsYXRpdmUiLCJyZXBsYWNlIiwibW9kdWxlIiwiY29kZSIsImZpbHRlciIsImYiLCJpbnZhbGlkYXRlIiwicmVhZEZpbGUiLCJkb1JlYWQiLCJ0aW1lcyIsImlkeCIsImZpbGVTeXN0ZW0iLCJlcnIiLCJjb250ZW50cyIsInJlZHVjZSIsImFyciIsIngiLCJCdWZmZXIiLCJjb25jYXQiLCJmaWxlQ29udGVudHMiLCJyZWFkRmlsZVN5bmMiLCJ1bmRlZmluZWQiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJjcmVhdGVQcmVwcm9jZXNvciIsIndlYnBhY2tQbHVnaW4iLCJjb250ZW50IiwidG9TdHJpbmciLCJjcmVhdGVXZWJwYWNrQmxvY2tlciIsInJlcXVlc3QiLCJyZXNwb25zZSIsIm5leHQiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLEtBQUtDLFFBQVEsSUFBUixDQUFUO0FBQ0EsSUFBSUMsSUFBSUQsUUFBUSxRQUFSLENBQVI7QUFDQSxJQUFJRSxPQUFPRixRQUFRLE1BQVIsQ0FBWDtBQUNBLElBQUlHLFFBQVFILFFBQVEsT0FBUixDQUFaO0FBQ0EsSUFBSUksdUJBQXVCSixRQUFRLHdCQUFSLENBQTNCO0FBQ0EsSUFBSUssVUFBVUwsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJTSx3QkFBd0JOLFFBQVEsZ0RBQVIsQ0FBNUI7O0FBRUEsSUFBSU8sVUFBVSxFQUFkO0FBQ0EsSUFBSUMsWUFBWSxLQUFoQjs7QUFFQSxTQUFTQyxNQUFUO0FBQ0Msb0JBQXFCQyxjQUR0QjtBQUVDLDBCQUEyQkMsb0JBRjVCO0FBR0MsOEJBQStCQyx3QkFIaEM7QUFJQyxxQkFBc0JDLFFBSnZCO0FBS0Msa0JBQW1CQyxLQUxwQjtBQU1DLHVCQUF3QkMsVUFOekIsRUFPQ0Msa0JBUEQsRUFRQ0Ms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b3VyY2VzQ29udGVudCI6WyJ2YXIgb3MgPSByZXF1aXJlKCdvcycpXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKVxudmFyIHdlYnBhY2tEZXZNaWRkbGV3YXJlID0gcmVxdWlyZSgnd2VicGFjay1kZXYtbWlkZGxld2FyZScpXG52YXIgd2VicGFjayA9IHJlcXVpcmUoJ3dlYnBhY2snKVxudmFyIFNpbmdsZUVudHJ5RGVwZW5kZW5jeSA9IHJlcXVpcmUoJ3dlYnBhY2svbGliL2RlcGVuZGVuY2llcy9TaW5nbGVFbnRyeURlcGVuZGVuY3knKVxuXG52YXIgYmxvY2tlZCA9IFtdXG52YXIgaXNCbG9ja2VkID0gZmFsc2VcblxuZnVuY3Rpb24gUGx1Z2luKFxuXHQvKiBjb25maWcud2VicGFjayAqLyB3ZWJwYWNrT3B0aW9ucyxcblx0LyogY29uZmlnLndlYnBhY2tTZXJ2ZXIgKi8gd2VicGFja1NlcnZlck9wdGlvbnMsXG5cdC8qIGNvbmZpZy53ZWJwYWNrTWlkZGxld2FyZSAqLyB3ZWJwYWNrTWlkZGxld2FyZU9wdGlvbnMsXG5cdC8qIGNvbmZpZy5iYXNlUGF0aCAqLyBiYXNlUGF0aCxcblx0LyogY29uZmlnLmZpbGVzICovIGZpbGVzLFxuXHQvKiBjb25maWcuZnJhbWV3b3JrcyAqLyBmcmFtZXdvcmtzLFxuXHRjdXN0b21GaWxlSGFuZGxlcnMsXG5cdGVtaXR0ZXJcbikge1xuICB3ZWJwYWNrT3B0aW9ucyA9IF8uY2xvbmUod2VicGFja09wdGlvbnMpIHx8IHt9XG4gIHdlYnBhY2tNaWRkbGV3YXJlT3B0aW9ucyA9IF8uY2xvbmUod2VicGFja01pZGRsZXdhcmVPcHRpb25zIHx8IHdlYnBhY2tTZXJ2ZXJPcHRpb25zKSB8fCB7fVxuXG4gIHZhciBhcHBseU9wdGlvbnMgPSBBcnJheS5pc0FycmF5KHdlYnBhY2tPcHRpb25zKSA/IHdlYnBhY2tPcHRpb25zIDogW3dlYnBhY2tPcHRpb25zXVxuICB2YXIgaW5jbHVkZUluZGV4ID0gYXBwbHlPcHRpb25zLmxlbmd0aCA+IDFcblxuICBhcHBseU9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbih3ZWJwYWNrT3B0aW9ucywgaW5kZXgpIHtcbiAgICAvLyBUaGUgd2VicGFjayB0aWVyIG93bnMgdGhlIHdhdGNoIGJlaGF2aW9yIHNvIHdlIHdhbnQgdG8gZm9yY2UgaXQgaW4gdGhlIGNvbmZpZ1xuICAgIHdlYnBhY2tPcHRpb25zLndhdGNoID0gdHJ1ZVxuXG4gICAgLy8gV2VicGFjayAyLjEuMC1iZXRhLjcrIHdpbGwgdGhyb3cgaW4gZXJyb3IgaWYgYm90aCBlbnRyeSBhbmQgcGx1Z2lucyBhcmUgbm90IHNwZWNpZmllZCBpbiBvcHRpb25zXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay9jb21taXQvYjNiYzU0Mjc5NjllMTVmZDM2NjNkOWExYzU3ZGJkMWViMmM5NDgwNVxuICAgIGlmICghd2VicGFja09wdGlvbnMuZW50cnkpIHtcbiAgICAgIHdlYnBhY2tPcHRpb25zLmVudHJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7fVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIXdlYnBhY2tPcHRpb25zLm91dHB1dCkge1xuICAgICAgd2VicGFja09wdGlvbnMub3V0cHV0ID0ge31cbiAgICB9O1xuXG4gICAgLy8gV2hlbiB1c2luZyBhbiBhcnJheSwgZXZlbiBvZiBsZW5ndGggMSwgd2Ugd2FudCB0byBpbmNsdWRlIHRoZSBpbmRleCB2YWx1ZSBmb3IgdGhlIGJ1aWxkLlxuICAgIC8vIFRoaXMgaXMgZHVlIHRvIHRoZSB3YXkgdGhhdCB0aGUgZGV2IHNlcnZlciBleHBvc2VzIGNvbW1vblBhdGggZm9yIGJ1aWxkIG91dHB1dC5cbiAgICB2YXIgaW5kZXhQYXRoID0gaW5jbHVkZUluZGV4ID8gaW5kZXggKyAnLycgOiAnJ1xuICAgIHZhciBwdWJsaWNQYXRoID0gaW5kZXhQYXRoICE9PSAnJyA/IGluZGV4UGF0aCArICcvJyA6ICcnXG5cbiAgICAvLyBNdXN0IGhhdmUgdGhlIGNvbW1vbiBfa2FybWFfd2VicGFja18gcHJlZml4IG9uIHBhdGggaGVyZSB0byBhdm9pZFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2svaXNzdWVzLzY0NVxuICAgIHdlYnBhY2tPcHRpb25zLm91dHB1dC5wYXRoID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCAnX2thcm1hX3dlYnBhY2tfJywgaW5kZXhQYXRoKVxuICAgIHdlYnBhY2tPcHRpb25zLm91dHB1dC5wdWJsaWNQYXRoID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCAnX2thcm1hX3dlYnBhY2tfJywgcHVibGljUGF0aClcbiAgICB3ZWJwYWNrT3B0aW9ucy5vdXRwdXQuZmlsZW5hbWUgPSAnW25hbWVdJ1xuICAgIGlmIChpbmNsdWRlSW5kZXgpIHtcbiAgICAgIHdlYnBhY2tPcHRpb25zLm91dHB1dC5qc29ucEZ1bmN0aW9uID0gJ3dlYnBhY2tKc29ucCcgKyBpbmRleFxuICAgIH1cbiAgICB3ZWJwYWNrT3B0aW9ucy5vdXRwdXQuY2h1bmtGaWxlbmFtZSA9ICdbaWRdLmJ1bmRsZS5qcydcbiAgfSlcblxuICB0aGlzLmVtaXR0ZXIgPSBlbWl0dGVyXG4gIHRoaXMud3JhcE1vY2hhID0gZnJhbWV3b3Jrcy5pbmRleE9mKCdtb2NoYScpID49IDAgJiYgaW5jbHVkZUluZGV4XG4gIHRoaXMub3B0aW9uc0NvdW50ID0gYXBwbHlPcHRpb25zLmxlbmd0aFxuICB0aGlzLmZpbGVzID0gW11cbiAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoXG4gIHRoaXMud2FpdGluZyA9IFtdXG5cbiAgdmFyIGNvbXBpbGVyXG4gIHRyeSB7XG4gICAgY29tcGlsZXIgPSB3ZWJwYWNrKHdlYnBhY2tPcHRpb25zKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrIHx8IGUpXG4gICAgaWYgKGUuZGV0YWlscykge1xuICAgICAgY29uc29sZS5lcnJvcihlLmRldGFpbHMpXG4gICAgfVxuICAgIHRocm93IGVcbiAgfVxuXG4gIHZhciBhcHBseVBsdWdpbnMgPSBjb21waWxlci5jb21waWxlcnMgfHwgW2NvbXBpbGVyXVxuXG4gIGFwcGx5UGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbXBpbGVyKSB7XG4gICAgY29tcGlsZXIucGx1Z2luKCd0aGlzLWNvbXBpbGF0aW9uJywgZnVuY3Rpb24oY29tcGlsYXRpb24sIHBhcmFtcykge1xuICAgICAgY29tcGlsYXRpb24uZGVwZW5kZW5jeUZhY3Rvcmllcy5zZXQoU2luZ2xlRW50cnlEZXBlbmRlbmN5LCBwYXJhbXMubm9ybWFsTW9kdWxlRmFjdG9yeSlcbiAgICB9KVxuICAgIGNvbXBpbGVyLnBsdWdpbignbWFrZScsIHRoaXMubWFrZS5iaW5kKHRoaXMpKVxuICB9LCB0aGlzKTtcblxuICBbJ2ludmFsaWQnLCAnd2F0Y2gtcnVuJywgJ3J1biddLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGNvbXBpbGVyLnBsdWdpbihuYW1lLCBmdW5jdGlvbihfLCBjYWxsYmFjaykge1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZVxuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIGNvbXBpbGVyLnBsdWdpbignZG9uZScsIGZ1bmN0aW9uKHN0YXRzKSB7XG4gICAgdmFyIGFwcGx5U3RhdHMgPSBBcnJheS5pc0FycmF5KHN0YXRzLnN0YXRzKSA/IHN0YXRzLnN0YXRzIDogW3N0YXRzXVxuICAgIHZhciBhc3NldHMgPSBbXVxuICAgIHZhciBub0Fzc2V0cyA9IGZhbHNlXG5cbiAgICBhcHBseVN0YXRzLmZvckVhY2goZnVuY3Rpb24oc3RhdHMpIHtcbiAgICAgIHN0YXRzID0gc3RhdHMudG9Kc29uKClcblxuICAgICAgYXNzZXRzLnB1c2guYXBwbHkoYXNzZXRzLCBzdGF0cy5hc3NldHMpXG4gICAgICBpZiAoc3RhdHMuYXNzZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBub0Fzc2V0cyA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKCF0aGlzLndhaXRpbmcgfHwgdGhpcy53YWl0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5ub3RpZnlLYXJtYUFib3V0Q2hhbmdlcygpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMud2FpdGluZyAmJiAhbm9Bc3NldHMpIHtcbiAgICAgIHZhciB3ID0gdGhpcy53YWl0aW5nXG5cbiAgICAgIHRoaXMud2FpdGluZyA9IG51bGxcbiAgICAgIHcuZm9yRWFjaChmdW5jdGlvbihjYikge1xuICAgICAgICBjYigpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlzQmxvY2tlZCA9IGZhbHNlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBibG9ja2VkW2ldKClcbiAgICB9XG4gICAgYmxvY2tlZCA9IFtdXG4gIH0uYmluZCh0aGlzKSlcbiAgY29tcGlsZXIucGx1Z2luKCdpbnZhbGlkJywgZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLndhaXRpbmcpIHtcbiAgICAgIHRoaXMud2FpdGluZyA9IFtdXG4gICAgfVxuICB9LmJpbmQodGhpcykpXG5cbiAgd2VicGFja01pZGRsZXdhcmVPcHRpb25zLnB1YmxpY1BhdGggPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksICdfa2FybWFfd2VicGFja18nKVxuICB2YXIgbWlkZGxld2FyZSA9IHRoaXMubWlkZGxld2FyZSA9IG5ldyB3ZWJwYWNrRGV2TWlkZGxld2FyZShjb21waWxlciwgd2VicGFja01pZGRsZXdhcmVPcHRpb25zKVxuXG4gIGN1c3RvbUZpbGVIYW5kbGVycy5wdXNoKHtcbiAgICB1cmxSZWdleDogbmV3IFJlZ0V4cCgnXicgKyBvcy50bXBkaXIoKSArICdcXC9fa2FybWFfd2VicGFja19cXC8uKi8nKSxcbiAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgICAgbWlkZGxld2FyZShyZXEsIHJlcywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDA0XG4gICAgICAgIHJlcy5lbmQoJ05vdCBmb3VuZCcpXG4gICAgICB9KVxuICAgIH1cbiAgfSlcblxuICBlbWl0dGVyLm9uKCdleGl0JywgZnVuY3Rpb24oZG9uZSkge1xuICAgIG1pZGRsZXdhcmUuY2xvc2UoKVxuICAgIGRvbmUoKVxuICB9KVxufVxuXG5QbHVnaW4ucHJvdG90eXBlLm5vdGlmeUthcm1hQWJvdXRDaGFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gIC8vIEZvcmNlIGEgcmVidWlsZFxuICB0aGlzLmVtaXR0ZXIucmVmcmVzaEZpbGVzKClcbn1cblxuUGx1Z2luLnByb3RvdHlwZS5hZGRGaWxlID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgaWYgKHRoaXMuZmlsZXMuaW5kZXhPZihlbnRyeSkgPj0gMCkge1xuICAgIHJldHVyblxuICB9XG4gIHRoaXMuZmlsZXMucHVzaChlbnRyeSlcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5QbHVnaW4ucHJvdG90eXBlLm1ha2UgPSBmdW5jdGlvbihjb21waWxhdGlvbiwgY2FsbGJhY2spIHtcbiAgYXN5bmMuZm9yRWFjaCh0aGlzLmZpbGVzLnNsaWNlKCksIGZ1bmN0aW9uKGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVudHJ5ID0gZmlsZVxuXG4gICAgaWYgKHRoaXMud3JhcE1vY2hhKSB7XG4gICAgICBlbnRyeSA9IHJlcXVpcmUucmVzb2x2ZSgnLi9tb2NoYS1lbnYtbG9hZGVyJykgKyAnIScgKyBlbnRyeVxuICAgIH1cblxuICAgIHZhciBkZXAgPSBuZXcgU2luZ2xlRW50cnlEZXBlbmRlbmN5KGVudHJ5KVxuXG4gICAgY29tcGlsYXRpb24uYWRkRW50cnkoJycsIGRlcCwgcGF0aC5yZWxhdGl2ZSh0aGlzLmJhc2VQYXRoLCBmaWxlKS5yZXBsYWNlKC9cXFxcL2csICcvJyksIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gSWYgdGhlIG1vZHVsZSBmYWlscyBiZWNhdXNlIG9mIGFuIEZpbGUgbm90IGZvdW5kIGVycm9yLCByZW1vdmUgdGhlIHRlc3QgZmlsZVxuICAgICAgaWYgKGRlcC5tb2R1bGUgJiYgZGVwLm1vZHVsZS5lcnJvciAmJlxuICAgICAgICBkZXAubW9kdWxlLmVycm9yLmVycm9yICYmXG4gICAgICAgIGRlcC5tb2R1bGUuZXJyb3IuZXJyb3IuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMuZmlsZXMuZmlsdGVyKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICByZXR1cm4gZmlsZSAhPT0gZlxuICAgICAgICB9KVxuICAgICAgICB0aGlzLm1pZGRsZXdhcmUuaW52YWxpZGF0ZSgpXG4gICAgICB9XG4gICAgICBjYWxsYmFjaygpXG4gICAgfS5iaW5kKHRoaXMpKVxuICB9LmJpbmQodGhpcyksIGNhbGxiYWNrKVxufVxuXG5QbHVnaW4ucHJvdG90eXBlLnJlYWRGaWxlID0gZnVuY3Rpb24oZmlsZSwgY2FsbGJhY2spIHtcbiAgdmFyIG1pZGRsZXdhcmUgPSB0aGlzLm1pZGRsZXdhcmVcbiAgdmFyIG9wdGlvbnNDb3VudCA9IHRoaXMub3B0aW9uc0NvdW50XG5cbiAgdmFyIGRvUmVhZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChvcHRpb25zQ291bnQgPiAxKSB7XG4gICAgICBhc3luYy50aW1lcyhvcHRpb25zQ291bnQsIGZ1bmN0aW9uKGlkeCwgY2FsbGJhY2spIHtcbiAgICAgICAgbWlkZGxld2FyZS5maWxlU3lzdGVtLnJlYWRGaWxlKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ19rYXJtYV93ZWJwYWNrXycsIGlkeCwgZmlsZS5yZXBsYWNlKC9cXFxcL2csICcvJykpLCBjYWxsYmFjaylcbiAgICAgIH0sIGZ1bmN0aW9uKGVyciwgY29udGVudHMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnRlbnRzID0gY29udGVudHMucmVkdWNlKGZ1bmN0aW9uKGFyciwgeCkge1xuICAgICAgICAgIGlmICghYXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gW3hdXG4gICAgICAgICAgfTtcbiAgICAgICAgICBhcnIucHVzaChuZXcgQnVmZmVyKCdcXG4nKSwgeClcblxuICAgICAgICAgIHJldHVybiBhcnJcbiAgICAgICAgfSwgbnVsbClcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgQnVmZmVyLmNvbmNhdChjb250ZW50cykpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZmlsZUNvbnRlbnRzID0gbWlkZGxld2FyZS5maWxlU3lzdGVtLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4ob3MudG1wZGlyKCksICdfa2FybWFfd2VicGFja18nLCBmaWxlLnJlcGxhY2UoL1xcXFwvZywgJy8nKSkpXG5cbiAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBmaWxlQ29udGVudHMpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gZXJyb3IgZnJvbSBgcmVhZEZpbGVTeW5jYCBtZXRob2QsIHdhaXQgZm9yIHRoZSBuZXh0IHRpY2suXG4gICAgICAgIC8vIENyZWRpdCAjNjkgQG1ld2RyaWxsZXJcbiAgICAgICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHF1b3Rlc1xuICAgICAgICAgIHRoaXMud2FpdGluZyA9IFtwcm9jZXNzLm5leHRUaWNrLmJpbmQocHJvY2VzcywgdGhpcy5yZWFkRmlsZS5iaW5kKHRoaXMsIGZpbGUsIGNhbGxiYWNrKSldXG5cbiAgICAgICAgICAvLyB0aHJvdyBvdGhlcndpc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LmJpbmQodGhpcylcblxuICBpZiAoIXRoaXMud2FpdGluZykge1xuICAgIGRvUmVhZCgpXG4gIH0gZWxzZSB7XG4gICAgLy8gUmV0cnkgdG8gcmVhZCBvbmNlIGEgYnVpbGQgaXMgZmluaXNoZWRcbiAgICAvLyBkbyBpdCBvbiBwcm9jZXNzLm5leHRUaWNrIHRvIGNhdGNoIGNoYW5nZXMgd2hpbGUgYnVpbGRpbmdcbiAgICB0aGlzLndhaXRpbmcucHVzaChwcm9jZXNzLm5leHRUaWNrLmJpbmQocHJvY2VzcywgdGhpcy5yZWFkRmlsZS5iaW5kKHRoaXMsIGZpbGUsIGNhbGxiYWNrKSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJlcHJvY2Vzb3IoLyogY29uZmlnLmJhc2VQYXRoICovIGJhc2VQYXRoLCB3ZWJwYWNrUGx1Z2luKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb250ZW50LCBmaWxlLCBkb25lKSB7XG4gICAgaWYgKHdlYnBhY2tQbHVnaW4uYWRkRmlsZShmaWxlLnBhdGgpKSB7XG4gICAgICAvLyByZWNvbXBpbGUgYXMgd2UgaGF2ZSBhbiBhc3NldCB0aGF0IHdlIGhhdmUgbm90IHNlZW4gYmVmb3JlXG4gICAgICB3ZWJwYWNrUGx1Z2luLm1pZGRsZXdhcmUuaW52YWxpZGF0ZSgpXG4gICAgfVxuXG4gICAgLy8gcmVhZCBibG9ja3MgdW50aWwgYnVuZGxlIGlzIGRvbmVcbiAgICB3ZWJwYWNrUGx1Z2luLnJlYWRGaWxlKHBhdGgucmVsYXRpdmUoYmFzZVBhdGgsIGZpbGUucGF0aCksIGZ1bmN0aW9uKGVyciwgY29udGVudCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH1cblxuICAgICAgZG9uZShlcnIsIGNvbnRlbnQgJiYgY29udGVudC50b1N0cmluZygpKVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2VicGFja0Jsb2NrZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkge1xuICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgIGJsb2NrZWQucHVzaChuZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0KClcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHdlYnBhY2tQbHVnaW46IFsndHlwZScsIFBsdWdpbl0sXG4gICdwcmVwcm9jZXNzb3I6d2VicGFjayc6IFsnZmFjdG9yeScsIGNyZWF0ZVByZXByb2Nlc29yXSxcbiAgJ21pZGRsZXdhcmU6d2VicGFja0Jsb2NrZXInOiBbJ2ZhY3RvcnknLCBjcmVhdGVXZWJwYWNrQmxvY2tlcl1cbn1cbiJdfQ==